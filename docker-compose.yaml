version: '3.5'

services:
  postgres:
    container_name: postgres_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    image: postgres:14.6
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-5432:}5432'
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      # Note: at start we tried `pg_isready` but it's not efficient since the postgres container restarts the server at startup (to init some scripts) so we ended with broken connections...
      # The best is to try a real query to be sure it's up and running as advised in https://github.com/docker-library/postgres/issues/146#issuecomment-872486465
      test: ['CMD-SHELL', 'psql -h localhost -U $${POSTGRES_USER} -c select 1 -d $${POSTGRES_DB}']
      interval: 1s
      timeout: 3s
      retries: 5

  pgadmin:
    container_name: pgadmin_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin

    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-5050:}80'
    networks:
      - postgres
    restart: unless-stopped

  mailcatcher:
    container_name: mailcatcher_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    image: aerzas/mailcatcher:2.0.1
    environment:
      EMAIL_HOST: ${EMAIL_HOST:-127.0.0.1}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:-}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:-}
      EMAIL_PORT: ${EMAIL_PORT:-1025}
    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-1080:}1080'
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-11025:}1025' # We set `11025` on the host because we had the case where a local email software had taken this port already and Docker didn't warn us (it was really tricky to find the cause...)
    restart: unless-stopped
    healthcheck:
      test: ['CMD', '/scripts/docker-healthcheck.sh']
      interval: 1s
      timeout: 3s
      retries: 5

  mariadb:
    # Matomo cannot be run on our PostgreSQL, so running a dedicated MariaDB
    container_name: mariadb_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    image: mariadb:10.11
    environment:
      - MYSQL_ROOT_PASSWORD=matomo
      - MYSQL_USER=matomo
      - MYSQL_PASSWORD=matomo
      - MYSQL_DATABASE=matomo
    volumes:
      - mariadb:/var/lib/mysql:Z
    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-3306:}3306'
    networks:
      - mariadb
    command: --max-allowed-packet=64MB
    restart: unless-stopped

  # TODO
  # first init of matomo is fully manual... seems it cannot be automated (but since volume that's fine)
  # https://github.com/matomo-org/docker/issues/238
  # maybe have a look at https://hub.docker.com/r/bitnami/matomo that provides `MATOMO_WEBSITE_NAME` & co.
  #
  # maybe set them into a docker-compose.matomo.yaml since it's rare to be used
  #
  # https://github.com/matomo-org/docker/blob/master/.examples/apache/docker-compose.yml
  # Wait for mariadb to be ready with healthcheck...
  # TODO

  matomo:
    container_name: matomo_container_${DOCKER_COMPOSE_CONTAINER_NAME_SUFFIX:-default}
    image: matomo:4.14
    depends_on: mariadb
    environment:
      - MATOMO_DATABASE_HOST=mariadb
      - MATOMO_DATABASE_ADAPTER=mysql
      - MATOMO_DATABASE_USERNAME=matomo
      - MATOMO_DATABASE_PASSWORD=matomo
      - MATOMO_DATABASE_DBNAME=matomo
      - MATOMO_DATABASE_TABLES_PREFIX=matomo_
    volumes:
      - matomo:/var/www/html:z
    ports:
      - '127.0.0.1:${DOCKER_COMPOSE_HOST_PORTS:-8080:}80'
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  mariadb:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mariadb:
  matomo:
